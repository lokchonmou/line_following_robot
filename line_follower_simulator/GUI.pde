/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:window1:235788:
  appc.background(200);
} //_CODE_:window1:235788:

public void Kp_change1(GSlider source, GEvent event) { //_CODE_:Kp:586398:
  println("slider1 - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:Kp:586398:

public void Kd_change1(GSlider source, GEvent event) { //_CODE_:Kd:861683:
  println("slider2 - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:Kd:861683:

public void d_change1(GSlider source, GEvent event) { //_CODE_:D:589959:
  println("slider3 - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:D:589959:

public void sensor_distance_change1(GSlider source, GEvent event) { //_CODE_:sensor_distance:515773:
  println("sensor_distance - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:sensor_distance:515773:

public void sensor_width_change1(GSlider source, GEvent event) { //_CODE_:sensor_width:819334:
  println("sensor_width - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:sensor_width:819334:

public void max_speed_change1(GSlider source, GEvent event) { //_CODE_:Max_speed:341497:
  println("Max_speed - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:Max_speed:341497:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Sketch Window");
  window1 = GWindow.getWindow(this, "Window title", 0, 0, 400, 400, JAVA2D);
  window1.noLoop();
  window1.addDrawHandler(this, "win_draw1");
  Kp = new GSlider(window1, 108+60, 48, 144, 60, 10.0);
  Kp.setShowValue(true);
  Kp.setShowLimits(true);
  
  Kp.setRotation(PI/2, GControlMode.CORNER);
  Kp.setLimits(0.9, 0.0, 2.2);
  Kp.setNumberFormat(G4P.DECIMAL, 2);
  Kp.setOpaque(false);
  Kp.addEventHandler(this, "Kp_change1");
  Kd = new GSlider(window1, 228, 48, 144, 60, 10.0);
  Kd.setShowValue(true);
  Kd.setShowLimits(true);
  Kd.setRotation(PI/2, GControlMode.CORNER);
  Kd.setLimits(0.0, 0.0, 0.12);
  Kd.setShowTicks(true);
  Kd.setNumberFormat(G4P.DECIMAL, 2);
  Kd.setOpaque(false);
  Kd.addEventHandler(this, "Kd_change1");
  d = new GSlider(window1, 108, 252, 144, 60, 10.0);
  d.setShowValue(true);
  d.setShowLimits(true);
  d.setRotation(PI/2, GControlMode.CORNER);
  d.setLimits(50.0, 10.0, 150.0);
  d.setShowTicks(true);
  d.setNumberFormat(G4P.DECIMAL, 2);
  d.setOpaque(false);
  d.addEventHandler(this, "D_change1");
  sensor_distance = new GSlider(window1, 228, 252, 144, 60, 10.0);
  sensor_distance.setShowValue(true);
  sensor_distance.setShowLimits(true);
  sensor_distance.setRotation(PI/2, GControlMode.CORNER);
  sensor_distance.setLimits(25.0, 10.0, 200.0);
  sensor_distance.setNumberFormat(G4P.DECIMAL, 2);
  sensor_distance.setOpaque(false);
  sensor_distance.addEventHandler(this, "sensor_distance_change1");
  sensor_width = new GSlider(window1, 360, 252, 144, 60, 10.0);
  sensor_width.setShowValue(true);
  sensor_width.setShowLimits(true);
  sensor_width.setRotation(PI/2, GControlMode.CORNER);
  sensor_width.setLimits(5.0, 5.0, 20.0);
  sensor_width.setNumberFormat(G4P.DECIMAL, 2);
  sensor_width.setOpaque(false);
  sensor_width.addEventHandler(this, "sensor_width_change1");
  label1 = new GLabel(window1, 96, 24, 80, 20);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("Kp");
  label1.setTextBold();
  label1.setOpaque(false);
  label2 = new GLabel(window1, 156, 24, 80, 20);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("Kd");
  label2.setTextBold();
  label2.setOpaque(false);
  label2 = new GLabel(window1, 36, 228, 80, 20);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("Robot width");
  label2.setTextBold();
  label2.setOpaque(false);
  label3 = new GLabel(window1, 156, 228, 72, 24);
  label3.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label3.setText("sensor distance");
  label3.setTextBold();
  label3.setOpaque(false);
  label4 = new GLabel(window1, 288, 228, 80, 20);
  label4.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label4.setText("Sensor width");
  label4.setTextBold();
  label4.setOpaque(false);
  max_speed = new GSlider(window1, 360-60, 48, 144, 60, 10.0);
  max_speed.setShowValue(true);
  max_speed.setShowLimits(true);
  max_speed.setRotation(PI/2, GControlMode.CORNER);
  max_speed.setLimits(2.5, 0.0, 5.0);
  max_speed.setNumberFormat(G4P.DECIMAL, 2);
  max_speed.setOpaque(false);
  max_speed.addEventHandler(this, "max_speed_change1");
  label5 = new GLabel(window1, 288, 24, 84, 24);
  label5.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label5.setText("Max Speed");
  label5.setTextBold();
  label5.setOpaque(false);
  window1.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow window1;
GSlider Kp; 
GSlider Kd; 
GSlider d; 
GSlider sensor_distance; 
GSlider sensor_width; 
GLabel label1; 
GLabel label2; 
GLabel label3; 
GLabel label4; 
GSlider max_speed; 
GLabel label5; 